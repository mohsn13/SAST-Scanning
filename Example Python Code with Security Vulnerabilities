import sqlite3

def unsafe_sql_query(username):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = '" + username + "'")
    user = cursor.fetchone()
    conn.close()
    return user

# Mitigation: Use parameterized queries to prevent SQL injection
def safe_sql_query(username):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    conn.close()
    return user

# Vulnerability 2: Cross-Site Scripting (XSS)
from flask import Flask, request, render_template_string

app = Flask(__name__)

@app.route('/hello')
def hello():
    name = request.args.get('name', '')
    # Vulnerable to XSS
    return render_template_string('<h1>Hello, {{ name }}!</h1>', name=name)

# Mitigation: Use proper HTML escaping to prevent XSS
from flask import Markup

@app.route('/hello_safe')
def hello_safe():
    name = request.args.get('name', '')
    return render_template_string('<h1>Hello, {{ name }}!</h1>', name=Markup.escape(name))

# Vulnerability 3: Insecure Deserialization
import pickle

# Data to be serialized
data = {'username': 'admin', 'password': 'password123'}

# Serialize data
serialized_data = pickle.dumps(data)

# Deserialize data (Vulnerable to code execution)
deserialized_data = pickle.loads(serialized_data)

# Mitigation: Avoid deserializing untrusted data or use secure serialization libraries

if __name__ == '__main__':
    app.run(debug=True)
